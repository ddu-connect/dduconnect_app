name: Deploy to PlayStore

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install npm dependencies
        run: |
          npm install

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Preparing to Sign AAB
        id: prepare-sign
        run: |
          echo "${{ secrets.SIGNING_KEY }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.KEY_STORE_PASSWORD }}" --batch release.keystore.asc > android/app/release.keystore
          mkdir ~/.gradle/ && touch ~/.gradle/gradle.properties
          echo "
            MYAPP_UPLOAD_STORE_FILE=release.keystore
            MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ALIAS }}
            MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEY_STORE_PASSWORD }}
            MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}
            " >> ~/.gradle/gradle.properties

      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Gradle cache for faster builds
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android App Bundle
        id: build
        run: |
          cd android && ./gradlew bundleRelease --no-daemon --stacktrace --scan

      - name: Generate Release APK
        run: |
          curl -LO https://github.com/google/bundletool/releases/download/1.8.1/bundletool-all-1.8.1.jar
          mv bundletool-all-1.8.1.jar bundletool.jar
          java -jar bundletool.jar build-apks --bundle=android/app/build/outputs/bundle/release/app-release.aab --output=app-release.apks --mode=universal --ks=android/app/release.keystore --ks-pass=pass:${{ secrets.KEY_STORE_PASSWORD }} --ks-key-alias=${{ secrets.ALIAS }} --key-pass=pass:${{ secrets.KEY_PASSWORD }}
          unzip -p app-release.apks universal.apk > android/app/build/outputs/bundle/release/ddu_connect_universal_${{ steps.vars.outputs.sha_short }}.apk

      - name: Upload AAB and APKs
        id: uploadArtifact
        uses: actions/upload-artifact@v2
        with:
            name: app
            path: |
              android/app/build/outputs/bundle/release/app-release.aab
              android/app/build/outputs/bundle/release/ddu_connect*.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download AAB and APKs
        uses: actions/download-artifact@v2
        id: download
        with:
          name: 'app'

      - name: Create service_account.json
        id: createServiceAccount
        run: echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service_account.json

      - name: Deploy to Play Store (Production)
        id: deploy
        uses: r0adkll/upload-google-play@v1.0.15
        with:
          serviceAccountJson: service_account.json
          packageName: com.dduconnect.dduconnect
          releaseFiles: |
            app-release.aab
          track: production
          whatsNewDirectory: whatsnew

      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app-release.aab
            ddu_connect*.apk
          tag_name: ${{ steps.vars.outputs.sha_short }}
          name: Release ${{ steps.vars.outputs.sha_short }}
          body_path: whatsnew/whatsnew-en-US
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
